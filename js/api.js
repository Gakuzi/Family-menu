
import { GoogleGenAI, Type } from "https://esm.run/@google/genai";
import { updateState } from './state.js';
import * as ui from './ui.js';

let ai;

function getAI(apiKey) {
    if (!ai || ai.apiKey !== apiKey) {
        ai = new GoogleGenAI({ apiKey });
    }
    return ai;
}

async function makeGeminiRequest(apiKey, prompt, jsonSchema, stepName) {
    console.log(`üü° REQUEST [${stepName}]: ${prompt.substring(0, 100)}...`);
    let retries = 3;
    while (retries > 0) {
        try {
            const genAI = getAI(apiKey);
            const response = await genAI.models.generateContent({
                model: "gemini-2.5-flash",
                contents: prompt,
                config: {
                    responseMimeType: "application/json",
                    responseSchema: jsonSchema
                }
            });
            const jsonText = response.text.trim();
            const data = JSON.parse(jsonText);
            console.log(`‚úÖ RESPONSE [${stepName}] RECEIVED`);
            return data;
        } catch (error) {
            retries--;
            console.error(`üî¥ ERROR [${stepName}]: ${error}. Retrying... (${retries} left)`);
            if (retries === 0) throw error;
            await new Promise(res => setTimeout(res, 1500));
        }
    }
}

export async function startGenerationProcess(state, purchasedItems = '', extraPrompt = '', updateProgressCallback) {
    const apiKey = state.settings.apiKey;
    if (!apiKey) {
        throw new Error("API key is not configured.");
    }

    // Step 0: Validate API Key
    await updateProgressCallback(2, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ò–ò", "–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞...");
    try {
        await getAI(apiKey).models.generateContent({ model: 'gemini-2.5-flash', contents: 'test' });
        console.log('‚úÖ API KEY VALIDATED');
    } catch (e) {
        if (e.message.includes('API key not valid')) {
            throw new Error('API key not valid');
        }
        throw new Error('Network error while validating API key.');
    }

    // Step 1: Generate Menu Plan
    await updateProgressCallback(10, "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "üß† –°–æ—Å—Ç–∞–≤–ª—è—é –ø–ª–∞–Ω –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é...");
    let menu;
    try {
        menu = await generateMenuPlan(state, purchasedItems, extraPrompt);
        if (!menu || menu.length === 0) throw new Error("API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –ø–ª–∞–Ω –º–µ–Ω—é.");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 1 (–ø–ª–∞–Ω –º–µ–Ω—é):", error);
        throw new Error(`[–ü–ª–∞–Ω –º–µ–Ω—é] ${error.message}`);
    }

    // Step 2: Generate Recipes Iteratively
    await updateProgressCallback(20, "‚úÖ –ü–ª–∞–Ω –º–µ–Ω—é —Å–æ—Å—Ç–∞–≤–ª–µ–Ω", "üìñ –°–æ–±–∏—Ä–∞—é —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤...");
    const uniqueMeals = new Set();
    menu.forEach(day => {
        Object.values(day.meals).forEach(mealName => {
            if (mealName && !mealName.includes('(–æ—Å—Ç–∞—Ç–∫–∏)')) {
                uniqueMeals.add(mealName);
            }
        });
    });
    const mealsToProcess = Array.from(uniqueMeals);
    const recipes = {};
    const recipeCache = state.recipeCache || {};
    const totalRecipes = mealsToProcess.length;
    const recipeProgressStart = 20;
    const recipeProgressEnd = 85;

    for (let i = 0; i < totalRecipes; i++) {
        const mealName = mealsToProcess[i];
        const currentProgress = recipeProgressStart + ((i + 1) / totalRecipes) * (recipeProgressEnd - recipeProgressStart);
        
        if (recipeCache[mealName]) {
            console.log(`CACHE HIT for recipe: ${mealName}`);
            const cachedRecipe = recipeCache[mealName];
            if (cachedRecipe && cachedRecipe.id) {
                recipes[cachedRecipe.id] = cachedRecipe;
            }
            await updateProgressCallback(currentProgress, `–†–µ—Ü–µ–ø—Ç ${i + 1}/${totalRecipes}`, `‚úîÔ∏è ${mealName} (–∏–∑ –∫—ç—à–∞)`);
            continue;
        }

        try {
            console.log(`CACHE MISS for recipe: ${mealName}. Calling API.`);
            await updateProgressCallback(currentProgress, `–†–µ—Ü–µ–ø—Ç ${i + 1}/${totalRecipes}`, `‚úçÔ∏è –°–æ–∑–¥–∞—é —Ä–µ—Ü–µ–ø—Ç –¥–ª—è: ${mealName}`);
            const recipe = await generateSingleRecipe(state, mealName);
            if (recipe && recipe.id) {
                recipes[recipe.id] = recipe;
                recipeCache[mealName] = recipe; // Add to cache
            } else {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è ${mealName}`);
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è "${mealName}":`, error);
            throw new Error(`[–†–µ—Ü–µ–ø—Ç: ${mealName}] ${error.message}`);
        }
    }
    
    // Update state with the new/modified cache
    updateState({ recipeCache: recipeCache });


    // Step 3: Generate Shopping List from Recipes
    await updateProgressCallback(90, "‚úÖ –†–µ—Ü–µ–ø—Ç—ã –≥–æ—Ç–æ–≤—ã", "üõí –§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫...");
    let shoppingList;
    try {
        shoppingList = await generateShoppingListFromRecipes(state, recipes);
        if (!shoppingList || shoppingList.length === 0) throw new Error("API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 3 (—Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫):", error);
        throw new Error(`[–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫] ${error.message}`);
    }

    await updateProgressCallback(95, "‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –≥–æ—Ç–æ–≤", "‚ú® –û–±—ä–µ–¥–∏–Ω—è—é –≤—Å–µ –¥–∞–Ω–Ω—ã–µ...");

    const comprehensiveData = { menu, recipes, shoppingList };

    await updateProgressCallback(100, "–ì–æ—Ç–æ–≤–æ!", "–í–∞—à–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.");
    return comprehensiveData;
}


function getFamilyDescription(family) {
    if (!Array.isArray(family)) return ''; // Defensive check
    return family.map(p => {
        if (!p || !p.name) return ''; // Defensive check for malformed member
        let description = `${p.name}, ${p.gender === 'male' ? '–ú—É–∂—á–∏–Ω–∞' : '–ñ–µ–Ω—â–∏–Ω–∞'}, ${p.age} –ª–µ—Ç. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${p.activity}.`;
        if (p.weight) description += ` –í–µ—Å: ${p.weight} –∫–≥.`;
        if (p.height) description += ` –†–æ—Å—Ç: ${p.height} —Å–º.`;
        return description;
    }).filter(Boolean).join('; '); // filter(Boolean) removes empty strings
}


async function generateMenuPlan(state, purchasedItems, extraPrompt) {
    const { family, menuDuration, preferences, cuisine, difficulty } = state.settings;
    const familyDescription = getFamilyDescription(family);

    let promptText = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¢–û–õ–¨–ö–û –ø–ª–∞–Ω –º–µ–Ω—é –Ω–∞ ${menuDuration} –¥–Ω–µ–π (—Å –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è –ø–æ —Å—É–±–±–æ—Ç—É) –¥–ª—è —Å–µ–º—å–∏: ${familyDescription}.
- –û–±—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${preferences}.
- –ö—É—Ö–Ω—è: ${cuisine}. –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${difficulty}.
- –ö–∞–∂–¥—ã–π –¥–µ–Ω—å: –ó–∞–≤—Ç—Ä–∞–∫, –ü–µ—Ä–µ–∫—É—Å, –û–±–µ–¥, –ü–æ–ª–¥–Ω–∏–∫, –£–∂–∏–Ω.
- –ò–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –æ—Å—Ç–∞—Ç–∫–∏ –æ—Ç —É–∂–∏–Ω–∞ –Ω–∞ –æ–±–µ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (–ø–æ–º–µ—á–∞–π –∏—Ö –∫–∞–∫ "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (–æ—Å—Ç–∞—Ç–∫–∏)").
- –ù–µ —Å–æ–∑–¥–∞–≤–∞–π —Ä–µ—Ü–µ–ø—Ç—ã –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫, —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–Ω—é —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –±–ª—é–¥.
`;
    if (purchasedItems) {
        promptText += `\n- –í–ê–ñ–ù–û: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: ${purchasedItems}.`;
    }
    if (extraPrompt) {
        promptText += `\n- –û–°–û–ë–û–ï –£–ö–ê–ó–ê–ù–ò–ï: ${extraPrompt}`;
    }

    const schema = {
        type: Type.OBJECT,
        properties: {
            menu: {
                type: Type.ARRAY,
                description: "–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é.",
                items: {
                    type: Type.OBJECT,
                    properties: {
                        day: { type: Type.STRING },
                        meals: {
                            type: Type.OBJECT,
                            properties: {
                                breakfast: { type: Type.STRING },
                                snack1: { type: Type.STRING },
                                lunch: { type: Type.STRING },
                                snack2: { type: Type.STRING },
                                dinner: { type: Type.STRING }
                            },
                            required: ["breakfast", "snack1", "lunch", "snack2", "dinner"]
                        }
                    },
                    required: ["day", "meals"]
                }
            }
        },
        required: ["menu"]
    };

    const result = await makeGeminiRequest(state.settings.apiKey, promptText, schema, "generateMenuPlan");
    return result.menu;
}

async function generateSingleRecipe(state, mealName) {
    const { family } = state.settings;
    
    const promptText = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –±–ª—é–¥–∞: "${mealName}".
- –†–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 'id' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'borsch-s-govyadinoy').
- –ù–∞–∑–≤–∞–Ω–∏–µ 'name' –¥–æ–ª–∂–Ω–æ –¢–û–ß–ù–û —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å "${mealName}".
- –†–∞—Å—Å—á–∏—Ç–∞–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é –∏–∑ ${family.length} —á–µ–ª–æ–≤–µ–∫.
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ 'steps'. –í –∫–∞–∂–¥–æ–º —à–∞–≥–µ —É–∫–∞–∂–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
`;
    const ingredientsSchema = { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { name: { type: Type.STRING }, quantity: { type: Type.STRING, description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä '200 –≥' –∏–ª–∏ '1 —à—Ç'" } }, required: ["name", "quantity"] } };
    const schema = {
        type: Type.OBJECT,
        properties: {
            id: { type: Type.STRING },
            name: { type: Type.STRING },
            ingredients: ingredientsSchema,
            steps: { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { description: { type: Type.STRING }, time: { type: Type.NUMBER, description: "–í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö. 0 –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ –Ω—É–∂–µ–Ω." }, ingredients: ingredientsSchema }, required: ["description", "time", "ingredients"] } }
        },
        required: ["id", "name", "ingredients", "steps"]
    };

    const result = await makeGeminiRequest(state.settings.apiKey, promptText, schema, `generateSingleRecipe: ${mealName}`);
    return result;
}


async function generateShoppingListFromRecipes(state, recipes) {
    const { totalBudget } = state.settings;
    
    const allIngredients = Object.values(recipes).flatMap(recipe =>
        recipe.ingredients.map(ing => `${ing.name} (${ing.quantity})`)
    ).join(', ');

    const promptText = `–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: ${allIngredients}, —Å–æ–∑–¥–∞–π —Å–≤–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.
- –°–≥—Ä—É–ø–ø–∏—Ä—É–π –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: "–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞", "–ú–æ–ª–æ—á–Ω—ã–µ –∏ —è–π—Ü–∞", "–û–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å", "–§—Ä—É–∫—Ç—ã –∏ –æ—Ä–µ—Ö–∏", "–ë–∞–∫–∞–ª–µ—è", "–•–ª–µ–± –∏ –≤—ã–ø–µ—á–∫–∞", "–ù–∞–ø–∏—Ç–∫–∏", "–ü—Ä–æ—á–µ–µ".
- –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å—É–º–º–∏—Ä—É–π –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ('totalNeeded').
- –ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ ('shoppingSuggestion'), –æ–∫—Ä—É–≥–ª—è—è –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏.
- –£–∫–∞–∂–∏ –ü–†–ò–ú–ï–†–ù–£–Æ —Ü–µ–Ω—É 'price' –≤ —Ä—É–±–ª—è—Ö –¥–ª—è 'shoppingSuggestion'.
- –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å –±—é–¥–∂–µ—Ç ${totalBudget} —Ä—É–±–ª–µ–π.
`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            shoppingList: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: {
                        category: { type: Type.STRING },
                        items: {
                            type: Type.ARRAY,
                            items: {
                                type: Type.OBJECT,
                                properties: {
                                    name: { type: Type.STRING },
                                    totalNeeded: { type: Type.OBJECT, properties: { qty: { type: Type.NUMBER }, unit: { type: Type.STRING } } },
                                    shoppingSuggestion: { type: Type.OBJECT, properties: { qty: { type: Type.NUMBER }, unit: { type: Type.STRING } } },
                                    price: { type: Type.NUMBER }
                                },
                                required: ["name", "totalNeeded", "shoppingSuggestion", "price"]
                            }
                        }
                    },
                    required: ["category", "items"]
                }
            }
        },
        required: ["shoppingList"]
    };

    const result = await makeGeminiRequest(state.settings.apiKey, promptText, schema, "generateShoppingListFromRecipes");
    
    // Initialize empty arrays for tracking user actions
    if (result.shoppingList) {
        result.shoppingList.forEach(category => {
            (category.items || []).forEach(item => {
                item.purchases = [];
                item.consumedQty = 0;
            });
        });
    }
    
    return result.shoppingList;
}



export async function generateStepImage(apiKey, recipe, stepIndex) {
    try {
        const genAI = getAI(apiKey);
        const stepDescription = recipe.steps[stepIndex].description;
        const prompt = `Food photography, realistic, high-detail photo of a cooking step: "${stepDescription}"`;
        
        const response = await genAI.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: '4:3',
            },
        });

        const base64ImageBytes = response.generatedImages[0].image.imageBytes;
        return `data:image/jpeg;base64,${base64ImageBytes}`;
    } catch (error) {
        console.error("Image generation failed:", error);
        return null;
    }
}

// NOTE: handleRegeneration would also benefit from a multi-step approach,
// but for now, we'll keep it as a single (but more focused) comprehensive call.
export async function handleRegeneration(type, data, isPreview = false, customPrompt = '') {
    const { getState, saveState } = await import('../js/state.js');
    const sourceState = isPreview ? getState().temp : getState();
    const apiKey = getState().settings.apiKey;

    if (!sourceState || !apiKey) {
        ui.showNotification("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–ª—é—á–∞ API.", "error");
        return;
    }

    ui.showNotification("–û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é...", 'loading');

    try {
        if (type === 'validate') {
            await getAI(data.apiKey).models.generateContent({model:'gemini-2.5-flash', contents: 'test'});
            return; // Just for validation
        }

        const familyDescription = getFamilyDescription(sourceState.settings.family);
        const { preferences, cuisine, difficulty, totalBudget } = sourceState.settings;

        let promptText = `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã—Å—Ç—É–ø–∏ –≤ —Ä–æ–ª–∏ –ò–ò-–¥–∏–µ—Ç–æ–ª–æ–≥–∞.
–°–µ–º—å—è: ${familyDescription}.
–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${preferences}, ${cuisine}, ${difficulty}.
–ë—é–¥–∂–µ—Ç: ${totalBudget} —Ä—É–±.

–ó–ê–î–ê–ß–ê: –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –º–µ–Ω—é, –≤–Ω–µ—Å–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤–µ—Ä–Ω–∏ –ü–û–õ–ù–´–ô –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç (—Å –∫–ª—é—á–∞–º–∏ "menu", "recipes", "shoppingList").

–°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é: ${JSON.stringify(sourceState.menu.map(d => d.meals))}.
`;

        if (type === 'meal') {
            const { dayName, mealKey } = data;
            const mealName = sourceState.menu.find(d => d.day === dayName)?.meals[key];
            promptText += `–ò–ó–ú–ï–ù–ï–ù–ò–ï: –í –¥–Ω–µ "${dayName}" –∑–∞–º–µ–Ω–∏ –±–ª—é–¥–æ "${mealKey}" ("${mealName}") –Ω–∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ. –ü–æ–∂–µ–ª–∞–Ω–∏–µ: ${customPrompt || '—Å–¥–µ–ª–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ'}. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –≤ –º–µ–Ω—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –ø–æ–∫—É–ø–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —ç—Ç–∏–º –æ–¥–Ω–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º.`;
        } else { // type === 'day'
            const { dayName } = data;
             promptText += `–ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–∏ –º–µ–Ω—é –¥–ª—è –¥–Ω—è "${dayName}". –ü–æ–∂–µ–ª–∞–Ω–∏–µ: ${customPrompt || '—Å–¥–µ–ª–∞–π —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–µ–µ'}. –°–æ—Ö—Ä–∞–Ω–∏ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –ø–æ–∫—É–ø–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —ç—Ç–æ–≥–æ –¥–Ω—è.`;
        }
         const ingredientsSchema = { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { name: { type: Type.STRING }, quantity: { type: Type.STRING } } } };
         const schema = {
            type: Type.OBJECT,
            properties: {
                menu: { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { day: { type: Type.STRING }, meals: { type: Type.OBJECT, properties: { breakfast: { type: Type.STRING }, snack1: { type: Type.STRING }, lunch: { type: Type.STRING }, snack2: { type: Type.STRING }, dinner: { type: Type.STRING } } } } } },
                recipes: { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { id: { type: Type.STRING }, name: { type: Type.STRING }, ingredients: ingredientsSchema, steps: { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { description: { type: Type.STRING }, time: { type: Type.NUMBER }, ingredients: ingredientsSchema } } } } } },
                shoppingList: { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { category: { type: Type.STRING }, items: { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { name: { type: Type.STRING }, totalNeeded: { type: Type.OBJECT, properties: { qty: { type: Type.NUMBER }, unit: { type: Type.STRING } } }, shoppingSuggestion: { type: Type.OBJECT, properties: { qty: { type: Type.NUMBER }, unit: { type: Type.STRING } } }, price: { type: Type.NUMBER } } } } } } }
            },
            required: ["menu", "recipes", "shoppingList"]
        };
        
        const fullData = await makeGeminiRequest(apiKey, promptText, schema, "handleRegeneration");
        
        // Post-process the response
        const recipesMap = {};
        if (fullData.recipes) {
            fullData.recipes.forEach(recipe => { recipesMap[recipe.id] = recipe; });
        }
        if (fullData.shoppingList) {
            fullData.shoppingList.forEach(category => {
                (category.items || []).forEach(item => {
                    item.purchases = []; item.consumedQty = 0;
                });
            });
        }
        const newData = { menu: fullData.menu, recipes: recipesMap, shoppingList: fullData.shoppingList };


        if (isPreview) {
            updateState({ temp: newData });
            ui.renderPreview();
            ui.showNotification("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!");
        } else {
            updateState(newData);
            saveState();
            ui.renderAll();
            ui.showNotification("–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
        }

    } catch(e) {
        ui.showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.", 'error');
        console.error(e);
    }
}
