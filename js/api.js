import { GoogleGenAI, Type } from "@google/genai";
import { getState, updateState } from "./state.js";

// Check if an error is related to the API key itself, warranting a switch to the next key.
const isApiKeyError = (error) => {
    const message = error.message.toLowerCase();
    return message.includes("api key not valid") ||
           message.includes("permission denied") ||
           message.includes("api key is invalid") ||
           message.includes("billing"); 
};

/**
 * Makes a call to the Gemini API, handling multiple API keys and failover.
 * @param {string} callName - The name of the API call for logging.
 * @param {string} prompt - The prompt to send to the model.
 * @param {object} schema - The expected JSON schema for the response.
 * @param {number} retriesPerKey - Number of retries for transient errors (like network issues) per key.
 * @param {number} delay - Delay between retries in milliseconds.
 * @returns {Promise<string>} The JSON response from the API as a string.
 */
async function apiCall(callName, prompt, schema, retriesPerKey = 2, delay = 3000) {
    console.log(`üü° REQUEST [${callName}]:`, prompt.substring(0, 100) + '...');
    const { apiKeys } = getState();
    const enabledKeys = apiKeys.filter(k => k.enabled);

    if (enabledKeys.length === 0) {
        throw new Error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—á–∏–π –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.");
    }

    for (let i = 0; i < enabledKeys.length; i++) {
        const currentKey = enabledKeys[i];
        console.log(`Trying API key #${i + 1}...`);
        
        const ai = new GoogleGenAI({ apiKey: currentKey.key });
        
        for (let attempt = 1; attempt <= retriesPerKey; attempt++) {
            try {
                const response = await ai.models.generateContent({
                    model: 'gemini-2.5-flash',
                    contents: prompt,
                    config: {
                        responseMimeType: "application/json",
                        responseSchema: schema,
                    }
                });
                
                console.log(`‚úÖ SUCCESS with key #${i + 1} on attempt ${attempt}.`);
                return response.text;

            } catch (error) {
                console.error(`üî¥ API CALL ERROR [${callName}] with key #${i + 1} (attempt ${attempt}):`, error);
                
                if (isApiKeyError(error)) {
                    console.warn(`Key #${i + 1} seems invalid. Disabling and trying next.`);
                    const allKeys = getState().apiKeys;
                    const keyIndex = allKeys.findIndex(k => k.key === currentKey.key);
                    if (keyIndex > -1) {
                        allKeys[keyIndex].enabled = false;
                        await updateState({ apiKeys: allKeys }, true); // Immediate update to disable key
                    }
                    break; // Stop retrying this key and move to the next.
                }

                if (attempt < retriesPerKey) {
                    const progressStatus = document.getElementById('progress-status');
                    if (progressStatus) {
                        progressStatus.textContent = `‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–±—É—é —Å–Ω–æ–≤–∞... (${retriesPerKey - attempt} –ø–æ–ø—ã—Ç–∫–∏)`;
                    }
                    console.log(`Retrying in ${delay / 1000}s...`);
                    await new Promise(res => setTimeout(res, delay));
                }
            }
        }
    }
    
    throw new Error("–í—Å–µ API –∫–ª—é—á–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∏–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏ –∏ –≤–∞—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
}


const menuPlanSchema = {
    type: Type.ARRAY,
    items: {
        type: Type.OBJECT,
        properties: {
            day_of_week: { type: Type.STRING },
            meals: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: {
                        meal_type: { type: Type.STRING },
                        name: { type: Type.STRING },
                    },
                    required: ["meal_type", "name"],
                },
            },
        },
        required: ["day_of_week", "meals"],
    },
};

const recipeSchema = {
    type: Type.OBJECT,
    properties: {
        id: { type: Type.STRING },
        name: { type: Type.STRING },
        description: { type: Type.STRING },
        prep_time: { type: Type.STRING },
        cook_time: { type: Type.STRING },
        servings: { type: Type.NUMBER },
        calories_per_serving: { type: Type.NUMBER },
        ingredients: {
            type: Type.ARRAY,
            items: {
                type: Type.OBJECT,
                properties: {
                    name: { type: Type.STRING },
                    quantity: { type: Type.STRING },
                    category: { type: Type.STRING },
                    estimated_price: { type: Type.NUMBER },
                },
                required: ["name", "quantity", "category", "estimated_price"],
            },
        },
        steps: {
            type: Type.ARRAY,
            items: {
                type: Type.OBJECT,
                properties: {
                    step: { type: Type.NUMBER },
                    description: { type: Type.STRING },
                    timer_minutes: { type: Type.NUMBER },
                    image_prompt: { type: Type.STRING },
                },
                required: ["step", "description", "image_prompt"],
            },
        },
    },
    required: ["id", "name", "description", "prep_time", "cook_time", "servings", "calories_per_serving", "ingredients", "steps"],
};


const activityLevels = {
    low: "–ù–∏–∑–∫–∞—è",
    medium: "–°—Ä–µ–¥–Ω—è—è",
    high: "–í—ã—Å–æ–∫–∞—è",
    very_high: "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
};

function formatFamilyInfo(family) {
    if (!family || family.length === 0) return '—Å–µ–º—å–∏ –Ω–µ—Ç';
    return family.map(p => {
        let details = [
            p.name,
            p.gender,
            `${p.age} –ª–µ—Ç`
        ];
        if (p.height) details.push(`${p.height} —Å–º`);
        if (p.weight) details.push(`${p.weight} –∫–≥`);
        if (p.activityLevel) details.push(`–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityLevels[p.activityLevel] || p.activityLevel}`);
        return `(${details.join(', ')})`;
    }).join('; ');
}


export async function generateMenuPlan(settings) {
    const familyInfo = formatFamilyInfo(settings.family);
    const prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¢–û–õ–¨–ö–û –ø–ª–∞–Ω –º–µ–Ω—é –Ω–∞ ${settings.menuDuration} –¥–Ω–µ–π (—Å –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è –ø–æ —Å—É–±–±–æ—Ç—É) –¥–ª—è —Å–µ–º—å–∏: ${familyInfo}.
- –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ—Å—Ç–µ, –≤–µ—Å–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–π, —É—á–∏—Ç—ã–≤–∞—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ.
- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${settings.preferences}.
- –ë—é–¥–∂–µ—Ç: –ø—Ä–∏–º–µ—Ä–Ω–æ ${settings.totalBudget} —Ä—É–±–ª–µ–π –Ω–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥.
- –ö—É—Ö–Ω—è: ${settings.cuisine}.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${settings.difficulty}.
- –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å: –ó–∞–≤—Ç—Ä–∞–∫, –ü–µ—Ä–µ–∫—É—Å 1, –û–±–µ–¥, –ü–µ—Ä–µ–∫—É—Å 2. –£–∂–∏–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
- –í –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–Ω–∏ –Ω–∞ –û–±–µ–¥ –∏–ª–∏ –ü–µ—Ä–µ–∫—É—Å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "–û—Å—Ç–∞—Ç–∫–∏" –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–ª—é–¥ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–µ.`;

    try {
        const result = await apiCall('generateMenuPlan', prompt, menuPlanSchema);
        console.log('‚úÖ RESPONSE [generateMenuPlan] RECEIVED');
        return JSON.parse(result);
    } catch (error) {
        console.error('üî¥ ERROR [generateMenuPlan]:', error);
        throw error;
    }
}

export async function generateSingleRecipe(recipeName, settings, existingRecipeIds) {
    const familyInfo = formatFamilyInfo(settings.family);
    const prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –±–ª—é–¥–∞: "${recipeName}".
- –†–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 'id' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'borsch-s-govyadinoy'), –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ: ${existingRecipeIds.join(', ')}.
- –†–∞—Å—Å—á–∏—Ç–∞–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ —Å–µ–º—å—é: ${familyInfo}. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏.
- –£—á–∏—Ç—ã–≤–∞–π –æ–±—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${settings.preferences}.
- –ë–ª—é–¥–æ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${settings.difficulty}.
- –ö–∞–∂–¥—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö ('estimated_price').
- –ö–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'image_prompt' - –∫—Ä–∞—Ç–∫–æ–µ, —è—Ä–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'a pot of boiling borscht with beef and vegetables').
- –ï—Å–ª–∏ –¥–ª—è —à–∞–≥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–∞–π–º–µ—Ä, —É–∫–∞–∂–∏ 'timer_minutes'.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–µ.`;
    
    try {
        const result = await apiCall(`generateSingleRecipe: ${recipeName}`, prompt, recipeSchema);
        console.log(`‚úÖ RESPONSE [generateSingleRecipe: ${recipeName}] RECEIVED`);
        return JSON.parse(result);
    } catch (error) {
        console.error(`üî¥ ERROR [generateSingleRecipe: ${recipeName}]:`, error);
        throw error;
    }
}