import { GoogleGenerativeAI, Type } from "@google/generative-ai";
import { getState, updateState } from "./state.js";

let genAI;

const menuPlanSchema = {
    type: Type.ARRAY,
    items: {
        type: Type.OBJECT,
        properties: {
            day_of_week: { type: Type.STRING },
            meals: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: {
                        meal_type: { type: Type.STRING },
                        name: { type: Type.STRING },
                    },
                    required: ["meal_type", "name"],
                },
            },
        },
        required: ["day_of_week", "meals"],
    },
};

const recipeSchema = {
    type: Type.OBJECT,
    properties: {
        id: { type: Type.STRING },
        name: { type: Type.STRING },
        description: { type: Type.STRING },
        prep_time: { type: Type.STRING },
        cook_time: { type: Type.STRING },
        servings: { type: Type.NUMBER },
        calories_per_serving: { type: Type.NUMBER },
        ingredients: {
            type: Type.ARRAY,
            items: {
                type: Type.OBJECT,
                properties: {
                    name: { type: Type.STRING },
                    quantity: { type: Type.STRING },
                    category: { type: Type.STRING },
                    estimated_price: { type: Type.NUMBER },
                },
                required: ["name", "quantity", "category", "estimated_price"],
            },
        },
        steps: {
            type: Type.ARRAY,
            items: {
                type: Type.OBJECT,
                properties: {
                    step: { type: Type.NUMBER },
                    description: { type: Type.STRING },
                    timer_minutes: { type: Type.NUMBER },
                    image_prompt: { type: Type.STRING },
                },
                required: ["step", "description", "image_prompt"],
            },
        },
    },
    required: ["id", "name", "description", "prep_time", "cook_time", "servings", "calories_per_serving", "ingredients", "steps"],
};


function getGenAI() {
    if (!genAI) {
        const { settings } = getState();
        if (settings.apiKey) {
            try {
                genAI = new GoogleGenerativeAI(settings.apiKey);
            } catch (error) {
                 console.error("Failed to initialize GoogleGenerativeAI:", error);
                 throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ò–ò. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞.");
            }
        } else {
            throw new Error("API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        }
    }
    return genAI;
}

async function apiCall(callName, prompt, config = {}, retries = 3, delay = 3000) {
    console.log(`üü° REQUEST [${callName}]:`, prompt.substring(0, 100) + '...');
    try {
        const ai = getGenAI();
        const model = ai.getGenerativeModel({ 
            model: "gemini-1.5-flash",
            generationConfig: {
                responseMimeType: "application/json",
                responseSchema: config.responseSchema,
            },
        });
        const result = await model.generateContent(prompt);
        const response = result.response;
        return response.text();
    } catch (error) {
        console.error(`üî¥ API CALL ERROR [${callName}] on attempt ${4 - retries}:`, error);
        if (retries > 0) {
            console.log(`Retrying in ${delay / 1000}s... (${retries - 1} left)`);
            
            // Update UI with retry status
            const progressStatus = document.getElementById('progress-status');
            if (progressStatus) {
                progressStatus.textContent = `‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–±—É—é —Å–Ω–æ–≤–∞... (${retries - 1} –ø–æ–ø—ã—Ç–∫–∏)`;
            }

            await new Promise(res => setTimeout(res, delay));
            return apiCall(callName, prompt, config, retries - 1, delay);
        }
        
        console.error(`üî¥ FINAL ERROR [${callName}]:`, error);
        let errorMessage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API.";
        if (error.message.includes("API key not valid")) {
            errorMessage = "–í–∞—à API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.";
        } else if (error.message.includes("429")) {
            errorMessage = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        } else if (error.message.includes("503") || error.message.includes("overloaded")) {
            errorMessage = "–°–µ—Ä–≤–µ—Ä—ã Google –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.";
        } else if (error.message.includes("billing")) {
            errorMessage = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞—à–∏–º Google Cloud –±–∏–ª–ª–∏–Ω–≥–æ–º. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω.";
        } else if (error.message.includes("permission denied")) {
            errorMessage = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Gemini API –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.";
        }
        throw new Error(errorMessage);
    }
}

export async function validateApiKey(apiKey) {
    try {
        const testAI = new GoogleGenerativeAI(apiKey);
        const model = testAI.getGenerativeModel({ model: "gemini-1.5-flash" });
        await model.generateContent("Test");
        console.log('‚úÖ API KEY VALIDATED');
        return true;
    } catch (error) {
        console.error("API Key validation failed:", error);
        return false;
    }
}

export async function generateMenuPlan(settings) {
    const familyInfo = settings.family.map(p => `${p.name}, ${p.gender}, ${p.age} –ª–µ—Ç`).join('; ');
    const prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¢–û–õ–¨–ö–û –ø–ª–∞–Ω –º–µ–Ω—é –Ω–∞ ${settings.menuDuration} –¥–Ω–µ–π (—Å –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è –ø–æ —Å—É–±–±–æ—Ç—É) –¥–ª—è —Å–µ–º—å–∏: ${familyInfo}.
- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${settings.preferences}.
- –ë—é–¥–∂–µ—Ç: –ø—Ä–∏–º–µ—Ä–Ω–æ ${settings.totalBudget} —Ä—É–±–ª–µ–π –Ω–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥.
- –ö—É—Ö–Ω—è: ${settings.cuisine}.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${settings.difficulty}.
- –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å: –ó–∞–≤—Ç—Ä–∞–∫, –ü–µ—Ä–µ–∫—É—Å 1, –û–±–µ–¥, –ü–µ—Ä–µ–∫—É—Å 2. –£–∂–∏–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
- –í –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–Ω–∏ –Ω–∞ –û–±–µ–¥ –∏–ª–∏ –ü–µ—Ä–µ–∫—É—Å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "–û—Å—Ç–∞—Ç–∫–∏" –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–ª—é–¥ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–µ.`;

    try {
        const result = await apiCall('generateMenuPlan', prompt, { responseSchema: menuPlanSchema });
        console.log('‚úÖ RESPONSE [generateMenuPlan] RECEIVED');
        return JSON.parse(result);
    } catch (error) {
        console.error('üî¥ ERROR [generateMenuPlan]:', error);
        throw error; // Propagate the error
    }
}

export async function generateSingleRecipe(recipeName, settings, existingRecipeIds) {
    const familyInfo = settings.family.map(p => `${p.name}, ${p.gender}, ${p.age} –ª–µ—Ç`).join('; ');
    const prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –±–ª—é–¥–∞: "${recipeName}".
- –†–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 'id' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'borsch-s-govyadinoy'), –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ: ${existingRecipeIds.join(', ')}.
- –†–∞—Å—Å—á–∏—Ç–∞–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é: ${familyInfo}.
- –£—á–∏—Ç—ã–≤–∞–π –æ–±—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${settings.preferences}.
- –ë–ª—é–¥–æ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${settings.difficulty}.
- –ö–∞–∂–¥—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö ('estimated_price').
- –ö–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'image_prompt' - –∫—Ä–∞—Ç–∫–æ–µ, —è—Ä–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'a pot of boiling borscht with beef and vegetables').
- –ï—Å–ª–∏ –¥–ª—è —à–∞–≥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–∞–π–º–µ—Ä, —É–∫–∞–∂–∏ 'timer_minutes'.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–µ.`;
    
    try {
        const result = await apiCall(`generateSingleRecipe: ${recipeName}`, prompt, { responseSchema: recipeSchema });
        console.log(`‚úÖ RESPONSE [generateSingleRecipe: ${recipeName}] RECEIVED`);
        return JSON.parse(result);
    } catch (error) {
        console.error(`üî¥ ERROR [generateSingleRecipe: ${recipeName}]:`, error);
        throw error; // Propagate the error
    }
}