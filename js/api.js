
import { GoogleGenAI, Type } from "https://esm.run/@google/genai";

let ai;

function getAI(apiKey) {
    if (!ai || ai.apiKey !== apiKey) {
        ai = new GoogleGenAI({ apiKey });
    }
    return ai;
}

async function makeGeminiRequest(apiKey, prompt, jsonSchema, stepName) {
    console.log(`üü° REQUEST [${stepName}]: ${prompt.substring(0, 100)}...`);
    let retries = 3;
    while (retries > 0) {
        try {
            const genAI = getAI(apiKey);
            const response = await genAI.models.generateContent({
                model: "gemini-2.5-flash",
                contents: prompt,
                config: {
                    responseMimeType: "application/json",
                    responseSchema: jsonSchema
                }
            });
            const jsonText = response.text.trim();
            const data = JSON.parse(jsonText);
            console.log(`‚úÖ RESPONSE [${stepName}] RECEIVED`);
            return data;
        } catch (error) {
            retries--;
            console.error(`üî¥ ERROR [${stepName}]: ${error}. Retrying... (${retries} left)`);
            if (retries === 0) throw error;
            await new Promise(res => setTimeout(res, 1500));
        }
    }
}

export async function getJobPlatforms(apiKey, mode = 'fetch') {
    if (mode === 'validate') {
        const genAI = getAI(apiKey);
        await genAI.models.generateContent({ model: 'gemini-2.5-flash', contents: 'test' });
        return true;
    }
    
    const prompt = "–ù–∞–∑–æ–≤–∏ 5-7 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤ –º–∏—Ä–µ –∏ –≤ –°–ù–ì —Å–∞–π—Ç–æ–≤ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ IT. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫.";
    const schema = {
        type: Type.OBJECT,
        properties: {
            platforms: {
                type: Type.ARRAY,
                items: { type: Type.STRING }
            }
        },
        required: ["platforms"]
    };

    const result = await makeGeminiRequest(apiKey, prompt, schema, "getJobPlatforms");
    return result.platforms;
}


export async function findJobs(state, updateProgressCallback) {
    const { apiKey, profile, connectedPlatforms } = state.settings;
    if (!apiKey) throw new Error("API key is not configured.");
    if (!profile || !profile.desiredRole) throw new Error("User profile is not complete.");

    await updateProgressCallback(10, "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è", "–°–æ—Å—Ç–∞–≤–ª—è—é –≤–∞—à –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç...");
    
    const profileDescription = `
        - –ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: ${profile.desiredRole}
        - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ${profile.experience} –ª–µ—Ç
        - –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏: ${profile.keySkills}
        - –û–∂–∏–¥–∞–Ω–∏—è –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ: ${profile.salaryExpectation || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
        - –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏–∏: ${profile.location || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
        - –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –∏ —Ü–µ–ª–∏: ${profile.summary}
    `;

    await updateProgressCallback(30, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º", `–ò–º–∏—Ç–∏—Ä—É—é –ø–æ–∏—Å–∫ –Ω–∞ ${connectedPlatforms.join(', ')}...`);

    const prompt = `
        –í—ã—Å—Ç—É–ø–∏ –≤ —Ä–æ–ª–∏ AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:
        ${profileDescription}

        –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ 8-10 –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û –í–´–ì–õ–Ø–î–Ø–©–ò–•, –Ω–æ –í–´–ú–´–®–õ–ï–ù–ù–´–• –≤–∞–∫–∞–Ω—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç —ç—Ç–æ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É. –í–∞–∫–∞–Ω—Å–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –ø–æ —Ç–∏–ø—É –∫–æ–º–ø–∞–Ω–∏–π –∏ –∑–∞–¥–∞—á–∞–º.

        –î–ª—è –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
        - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID.
        - –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.
        - –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–º—ã—à–ª–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.
        - –õ–æ–∫–∞—Ü–∏—é (–º–æ–∂–µ—Ç –±—ã—Ç—å –≥–æ—Ä–æ–¥ –∏–ª–∏ "–£–¥–∞–ª–µ–Ω–Ω–æ").
        - –ó–∞—Ä–ø–ª–∞—Ç–Ω—É—é –≤–∏–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "250 000 - 300 000 —Ä—É–±.").
        - –ö—Ä–∞—Ç–∫–æ–µ, –Ω–æ –µ–º–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
        - –°–ø–∏—Å–æ–∫ –∏–∑ 3-4 –∫–ª—é—á–µ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.
        - –û—Ü–µ–Ω–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (matchScore) –æ—Ç 75 –¥–æ 99.
        - –ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ (matchReasoning), –ø–æ—á–µ–º—É —ç—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç—É.
    `;

    const schema = {
        type: Type.OBJECT,
        properties: {
            jobs: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: {
                        id: { type: Type.STRING },
                        title: { type: Type.STRING },
                        company: { type: Type.STRING },
                        location: { type: Type.STRING },
                        salary: { type: Type.STRING },
                        description: { type: Type.STRING },
                        requirements: { type: Type.ARRAY, items: { type: Type.STRING } },
                        matchScore: { type: Type.NUMBER },
                        matchReasoning: { type: Type.STRING }
                    },
                    required: ["id", "title", "company", "location", "salary", "description", "requirements", "matchScore", "matchReasoning"]
                }
            }
        },
        required: ["jobs"]
    };

    await updateProgressCallback(60, "–ü–æ–¥–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π", "–ò—Å–ø–æ–ª—å–∑—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...");
    
    const result = await makeGeminiRequest(apiKey, prompt, schema, "findJobs");
    
    await updateProgressCallback(100, "–ì–æ—Ç–æ–≤–æ!", "–ù–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞–π–¥–µ–Ω—ã.");

    return result.jobs;
}
