import { GoogleGenAI, Type } from "https://esm.run/@google/genai";
import { updateState } from './state.js';
import * as ui from './ui.js';

let ai;

function getAI(apiKey) {
    if (!ai || ai.apiKey !== apiKey) {
        ai = new GoogleGenAI({ apiKey });
    }
    return ai;
}

async function makeGeminiRequest(apiKey, prompt, jsonSchema) {
    console.log(`üü° REQUEST: ${prompt.substring(0, 100)}...`);
    let retries = 3;
    while (retries > 0) {
        try {
            const genAI = getAI(apiKey);
            const response = await genAI.models.generateContent({
                model: "gemini-2.5-flash",
                contents: prompt,
                config: {
                    responseMimeType: "application/json",
                    responseSchema: jsonSchema
                }
            });
            const jsonText = response.text.trim();
            const data = JSON.parse(jsonText);
            console.log(`‚úÖ RESPONSE RECEIVED`);
            return data;
        } catch (error) {
            retries--;
            console.error(`üî¥ ERROR: ${error}. Retrying... (${retries} left)`);
            if (retries === 0) throw error;
            await new Promise(res => setTimeout(res, 1500));
        }
    }
}

export async function startGenerationProcess(state, purchasedItems = '', extraPrompt = '', updateProgressCallback) {
    const apiKey = state.settings.apiKey;
    if (!apiKey) {
        throw new Error("API key is not configured.");
    }
    
    const TOTAL_STEPS = 10;
    await updateProgressCallback(1, TOTAL_STEPS, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Gemini‚Ä¶", "–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞...");

    try {
        await getAI(apiKey).models.generateContent({ model: 'gemini-2.5-flash', contents: 'test' });
        console.log('‚úÖ API KEY VALIDATED');
    } catch (e) {
        if (e.message.includes('API key not valid')) {
            throw new Error('API key not valid');
        }
        throw new Error('Network error while validating API key.');
    }

    await updateProgressCallback(2, TOTAL_STEPS, "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Å–µ–º—å–∏", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...");

    let progressInterval;
    try {
        const thinkingMessages = [
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è...",
            "–ü–æ–¥–±–∏—Ä–∞—é —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –±–ª—é–¥–∞...",
            "–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å...",
            "–ü—Ä–æ–¥—É–º—ã–≤–∞—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏...",
            "–°–æ—Å—Ç–∞–≤–ª—è—é —Ä–µ—Ü–µ–ø—Ç—ã, —á—Ç–æ–±—ã –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ –∏ –≤–∫—É—Å–Ω–æ...",
            "–§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...",
            "–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—é–¥–∂–µ—Ç—É...",
            "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ, —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–ª–∞–Ω..."
        ];
        let messageIndex = 0;
        let currentStep = 2;

        progressInterval = setInterval(() => {
            messageIndex = (messageIndex + 1) % thinkingMessages.length;
            if (currentStep < TOTAL_STEPS - 1) {
                currentStep++;
            }
            updateProgressCallback(currentStep, TOTAL_STEPS, "–ú–∞–≥–∏—è –ò–ò –≤ –¥–µ–π—Å—Ç–≤–∏–∏‚Ä¶", thinkingMessages[messageIndex]);
        }, 2500);

        const comprehensiveData = await generateComprehensiveData(state, purchasedItems, extraPrompt);
        
        clearInterval(progressInterval);
        await updateProgressCallback(TOTAL_STEPS, TOTAL_STEPS, "–ì–æ—Ç–æ–≤–æ!", "–í–∞—à–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.");

        return comprehensiveData;

    } catch (error) {
        if (progressInterval) clearInterval(progressInterval);
        throw error;
    }
}

async function generateComprehensiveData(state, purchasedItems = '', extraPrompt = '') {
    const { family, menuDuration, preferences, cuisine, difficulty, totalBudget } = state.settings;
    
    const familyDescription = family.map(p => {
        let description = `${p.name}, ${p.gender === 'male' ? '–ú—É–∂—á–∏–Ω–∞' : '–ñ–µ–Ω—â–∏–Ω–∞'}, ${p.age} –ª–µ—Ç. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${p.activity}.`;
        if (p.weight) description += ` –í–µ—Å: ${p.weight} –∫–≥.`;
        if (p.height) description += ` –†–æ—Å—Ç: ${p.height} —Å–º.`;
        return description;
    }).join('; ');

    let promptText = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–Ω–∏–º JSON-–æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç—Ä–∏ –∫–ª—é—á–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: "menu", "recipes", "shoppingList".

1.  **menu**: –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é –Ω–∞ ${menuDuration} –¥–Ω–µ–π (—Å –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è –ø–æ —Å—É–±–±–æ—Ç—É) –¥–ª—è —Å–µ–º—å–∏: ${familyDescription}.
    *   –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Å –∏ —Ä–æ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π. –ï—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞, –ø–æ–ª–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    *   –û–±—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${preferences}.
    *   –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –∫—É—Ö–Ω—è: ${cuisine}.
    *   –ñ–µ–ª–∞–µ–º–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–ª—é–¥: ${difficulty}.
    *   –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å: –ó–∞–≤—Ç—Ä–∞–∫, –ü–µ—Ä–µ–∫—É—Å, –û–±–µ–¥, –ü–æ–ª–¥–Ω–∏–∫, –£–∂–∏–Ω.
    *   –ò–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –æ—Å—Ç–∞—Ç–∫–∏ –æ—Ç —É–∂–∏–Ω–∞ –Ω–∞ –æ–±–µ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (–ø–æ–º–µ—á–∞–π –∏—Ö –∫–∞–∫ "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (–æ—Å—Ç–∞—Ç–∫–∏)").

2.  **recipes**: –ú–∞—Å—Å–∏–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –¥–ª—è –ö–ê–ñ–î–û–ì–û —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –±–ª—é–¥–∞ –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é (–∫—Ä–æ–º–µ –±–ª—é–¥ —Å –ø–æ–º–µ—Ç–∫–æ–π "–æ—Å—Ç–∞—Ç–∫–∏").
    *   –ö–∞–∂–¥—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 'id' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'borsch-s-govyadinoy').
    *   –ù–∞–∑–≤–∞–Ω–∏–µ 'name' —Ä–µ—Ü–µ–ø—Ç–∞ –¥–æ–ª–∂–Ω–æ –¢–û–ß–ù–û —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—é –≤ –º–µ–Ω—é.
    *   –í–∫–ª—é—á–∏ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–ª—è —Å–µ–º—å–∏ –∏–∑ ${family.length} —á–µ–ª–æ–≤–µ–∫.
    *   –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ 'steps'. –í –∫–∞–∂–¥–æ–º —à–∞–≥–µ —É–∫–∞–∂–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.

3.  **shoppingList**: –°–≤–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    *   –°—É–º–º–∏—Ä—É–π –í–°–ï –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –í–°–ï–• —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.
    *   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: "–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞", "–ú–æ–ª–æ—á–Ω—ã–µ –∏ —è–π—Ü–∞", "–û–≤–æ—â–∏ –∏ –∑–µ–ª–µ–Ω—å", "–§—Ä—É–∫—Ç—ã –∏ –æ—Ä–µ—Ö–∏", "–ë–∞–∫–∞–ª–µ—è", "–•–ª–µ–± –∏ –≤—ã–ø–µ—á–∫–∞", "–ù–∞–ø–∏—Ç–∫–∏", "–ü—Ä–æ—á–µ–µ".
    *   –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —É–∫–∞–∂–∏ –æ–±—â–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 'totalNeeded', –∞ –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏ 'shoppingSuggestion' ‚Äî —Ä–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –æ–∫—Ä—É–≥–ª—è—è –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è 750–≥ –º—É–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫—É–ø–∏—Ç—å 1–∫–≥).
    *   –£–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É 'price' –≤ —Ä—É–±–ª—è—Ö –¥–ª—è 'shoppingSuggestion'. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å –±—é–¥–∂–µ—Ç ${totalBudget} —Ä—É–±–ª–µ–π.
`;

    if (purchasedItems) {
        promptText += `\n–í–ê–ñ–ù–û: –ü—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é –æ—Ç–¥–∞–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–ª—é–¥–∞–º, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã. –°–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${purchasedItems}.`;
    }
    if (extraPrompt) {
         promptText += `\n–û–°–û–ë–û–ï –£–ö–ê–ó–ê–ù–ò–ï: ${extraPrompt}`;
    }

    const ingredientsSchema = { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { name: { type: Type.STRING }, quantity: { type: Type.STRING, description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä '200 –≥' –∏–ª–∏ '1 —à—Ç'" } }, required: ["name", "quantity"] } };
    
    const schema = {
        type: Type.OBJECT,
        properties: {
            menu: {
                type: Type.ARRAY,
                description: "–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é.",
                items: { type: Type.OBJECT, properties: { day: { type: Type.STRING }, meals: { type: Type.OBJECT, properties: { breakfast: { type: Type.STRING }, snack1: { type: Type.STRING }, lunch: { type: Type.STRING }, snack2: { type: Type.STRING }, dinner: { type: Type.STRING } }, required: ["breakfast", "snack1", "lunch", "snack2", "dinner"] } }, required: ["day", "meals"] }
            },
            recipes: {
                type: Type.ARRAY,
                description: "–†–µ—Ü–µ–ø—Ç—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª—é–¥ –∏–∑ –º–µ–Ω—é.",
                items: {
                    type: Type.OBJECT,
                    properties: {
                        id: { type: Type.STRING, description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ—Ü–µ–ø—Ç–∞" },
                        name: { type: Type.STRING, description: "–ù–∞–∑–≤–∞–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é" },
                        ingredients: ingredientsSchema,
                        steps: { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { description: { type: Type.STRING }, time: { type: Type.NUMBER, description: "–í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö. 0 –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ –Ω—É–∂–µ–Ω." }, ingredients: ingredientsSchema }, required: ["description", "time", "ingredients"] } }
                    },
                    required: ["id", "name", "ingredients", "steps"]
                }
            },
            shoppingList: {
                type: Type.ARRAY,
                description: "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.",
                items: {
                    type: Type.OBJECT,
                    properties: {
                        category: { type: Type.STRING },
                        items: { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { name: { type: Type.STRING }, totalNeeded: { type: Type.OBJECT, properties: { qty: { type: Type.NUMBER }, unit: { type: Type.STRING } } }, shoppingSuggestion: { type: Type.OBJECT, properties: { qty: { type: Type.NUMBER }, unit: { type: Type.STRING } } }, price: { type: Type.NUMBER } }, required: ["name", "totalNeeded", "shoppingSuggestion", "price"] } }
                    },
                    required: ["category", "items"]
                }
            }
        },
        required: ["menu", "recipes", "shoppingList"]
    };

    const comprehensiveData = await makeGeminiRequest(state.settings.apiKey, promptText, schema);

    const recipesMap = {};
    if (comprehensiveData.recipes) {
        comprehensiveData.recipes.forEach(recipe => {
            recipesMap[recipe.id] = recipe;
        });
    }

    if (comprehensiveData.shoppingList) {
        comprehensiveData.shoppingList.forEach(category => {
            (category.items || []).forEach(item => {
                item.purchases = [];
                item.consumedQty = 0;
            });
        });
    }
    
    return {
        menu: comprehensiveData.menu || [],
        recipes: recipesMap,
        shoppingList: comprehensiveData.shoppingList || []
    };
}


export async function generateStepImage(apiKey, recipe, stepIndex) {
    try {
        const genAI = getAI(apiKey);
        const stepDescription = recipe.steps[stepIndex].description;
        const prompt = `Food photography, realistic, high-detail photo of a cooking step: "${stepDescription}"`;
        
        const response = await genAI.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: '4:3',
            },
        });

        const base64ImageBytes = response.generatedImages[0].image.imageBytes;
        return `data:image/jpeg;base64,${base64ImageBytes}`;
    } catch (error) {
        console.error("Image generation failed:", error);
        return null;
    }
}

export async function handleRegeneration(type, data, isPreview = false, customPrompt = '') {
    const { getState, saveState } = await import('../js/state.js');
    const sourceState = isPreview ? getState().temp : getState();
    const apiKey = getState().settings.apiKey;

    if (!sourceState || !apiKey) {
        ui.showNotification("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–ª—é—á–∞ API.", "error");
        return;
    }

    ui.showNotification("–û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é...", 'loading');

    try {
        let extraPrompt = '';
        const currentMenuString = JSON.stringify(sourceState.menu.map(d => ({day: d.day, meals: d.meals})));
        
        if (type === 'validate') {
            await getAI(data.apiKey).models.generateContent({model:'gemini-2.5-flash', contents: 'test'});
            return; // Just for validation
        }

        if (type === 'meal') {
            const { dayName, mealKey } = data;
            const mealName = sourceState.menu.find(d => d.day === dayName)?.meals[mealKey];
            extraPrompt = `–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –º–µ–Ω—é: ${currentMenuString}. –°–î–ï–õ–ê–ô –¢–û–õ–¨–ö–û –û–î–ù–û –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¥–ª—è –¥–Ω—è "${dayName}" –∑–∞–º–µ–Ω–∏ –±–ª—é–¥–æ "${mealKey}" ("${mealName}") –Ω–∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ. –ü–æ–∂–µ–ª–∞–Ω–∏–µ: ${customPrompt || '—Å–¥–µ–ª–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ'}. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –≤ –º–µ–Ω—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –ø–æ–∫—É–ø–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —ç—Ç–∏–º –æ–¥–Ω–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º.`;
        } else { // type === 'day'
            const { dayName } = data;
            extraPrompt = `–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –º–µ–Ω—é: ${currentMenuString}. –°–î–ï–õ–ê–ô –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¢–û–õ–¨–ö–û –î–õ–Ø –û–î–ù–û–ì–û –î–ù–Ø: –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–∏ –º–µ–Ω—é –¥–ª—è –¥–Ω—è "${dayName}". –ü–æ–∂–µ–ª–∞–Ω–∏–µ: ${customPrompt || '—Å–¥–µ–ª–∞–π —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–µ–µ'}. –°–æ—Ö—Ä–∞–Ω–∏ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –ø–æ–∫—É–ø–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —ç—Ç–æ–≥–æ –¥–Ω—è.`;
        }

        const purchasedItems = (getState().shoppingList || [])
            .flatMap(c => c.items || [])
            .filter(item => (item.purchases || []).length > 0)
            .map(item => item.name)
            .join(', ');
        
        const newData = await generateComprehensiveData(sourceState, purchasedItems, extraPrompt);
        
        if (isPreview) {
            updateState({ temp: newData });
            ui.renderPreview();
            ui.showNotification("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!");
        } else {
            updateState(newData);
            saveState();
            ui.renderAll();
            ui.showNotification("–ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
        }

    } catch(e) {
        ui.showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.", 'error');
        console.error(e);
    }
}