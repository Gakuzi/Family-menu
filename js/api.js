import { GoogleGenerativeAI } from "@google/generative-ai";
import { getState } from "./state.js";

// Per modern security guidelines, the API key must be handled via environment variables
// and should not be exposed or entered in the client-side application.
if (!process.env.API_KEY) {
    // This provides a clear error for the developer if the environment is not set up.
    console.error("API_KEY environment variable not set.");
    alert("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.");
}

const genAI = new GoogleGenerativeAI({ apiKey: process.env.API_KEY });

const menuPlanSchema = {
    type: 'ARRAY',
    items: {
        type: 'OBJECT',
        properties: {
            day_of_week: { type: 'STRING' },
            meals: {
                type: 'ARRAY',
                items: {
                    type: 'OBJECT',
                    properties: {
                        meal_type: { type: 'STRING' },
                        name: { type: 'STRING' },
                    },
                    required: ["meal_type", "name"],
                },
            },
        },
        required: ["day_of_week", "meals"],
    },
};

const recipeSchema = {
    type: 'OBJECT',
    properties: {
        id: { type: 'STRING' },
        name: { type: 'STRING' },
        description: { type: 'STRING' },
        prep_time: { type: 'STRING' },
        cook_time: { type: 'STRING' },
        servings: { type: 'NUMBER' },
        calories_per_serving: { type: 'NUMBER' },
        ingredients: {
            type: 'ARRAY',
            items: {
                type: 'OBJECT',
                properties: {
                    name: { type: 'STRING' },
                    quantity: { type: 'STRING' },
                    category: { type: 'STRING' },
                    estimated_price: { type: 'NUMBER' },
                },
                required: ["name", "quantity", "category", "estimated_price"],
            },
        },
        steps: {
            type: 'ARRAY',
            items: {
                type: 'OBJECT',
                properties: {
                    step: { type: 'NUMBER' },
                    description: { type: 'STRING' },
                    timer_minutes: { type: 'NUMBER' },
                    image_prompt: { type: 'STRING' },
                },
                required: ["step", "description", "image_prompt"],
            },
        },
    },
    required: ["id", "name", "description", "prep_time", "cook_time", "servings", "calories_per_serving", "ingredients", "steps"],
};

async function apiCall(callName, prompt, schema, retries = 3, delay = 3000) {
    console.log(`üü° REQUEST [${callName}]:`, prompt.substring(0, 100) + '...');
    try {
        const response = await genAI.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: schema,
            }
        });
        
        console.log(`‚úÖ RESPONSE [${callName}] RECEIVED`);
        return response.text;
    } catch (error) {
        console.error(`üî¥ API CALL ERROR [${callName}] on attempt ${4 - retries}:`, error);
        if (retries > 0) {
            console.log(`Retrying in ${delay / 1000}s... (${retries - 1} left)`);
            
            const progressStatus = document.getElementById('progress-status');
            if (progressStatus) {
                progressStatus.textContent = `‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–±—É—é —Å–Ω–æ–≤–∞... (${retries - 1} –ø–æ–ø—ã—Ç–∫–∏)`;
            }

            await new Promise(res => setTimeout(res, delay));
            return apiCall(callName, prompt, schema, retries - 1, delay);
        }
        
        console.error(`üî¥ FINAL ERROR [${callName}]:`, error);
        let errorMessage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API.";
        if (error.message.includes("API key not valid")) {
            errorMessage = "API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.";
        } else if (error.message.includes("429")) {
            errorMessage = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        } else if (error.message.includes("503") || error.message.includes("overloaded")) {
            errorMessage = "–°–µ—Ä–≤–µ—Ä—ã Google –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.";
        } else if (error.message.includes("billing")) {
            errorMessage = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞—à–∏–º Google Cloud –±–∏–ª–ª–∏–Ω–≥–æ–º. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω.";
        } else if (error.message.includes("permission denied")) {
            errorMessage = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Gemini API –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.";
        }
        throw new Error(errorMessage);
    }
}

export async function validateApiKey() {
    // This function now simply tests the connection using the environment variable key.
    try {
        const response = await genAI.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: "Test",
        });
        console.log('‚úÖ API Connection OK');
        return !!response.text;
    } catch (error) {
        console.error("API connection test failed:", error);
        return false;
    }
}

export async function generateMenuPlan(settings) {
    const familyInfo = settings.family.map(p => `${p.name}, ${p.gender}, ${p.age} –ª–µ—Ç`).join('; ');
    const prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¢–û–õ–¨–ö–û –ø–ª–∞–Ω –º–µ–Ω—é –Ω–∞ ${settings.menuDuration} –¥–Ω–µ–π (—Å –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è –ø–æ —Å—É–±–±–æ—Ç—É) –¥–ª—è —Å–µ–º—å–∏: ${familyInfo}.
- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${settings.preferences}.
- –ë—é–¥–∂–µ—Ç: –ø—Ä–∏–º–µ—Ä–Ω–æ ${settings.totalBudget} —Ä—É–±–ª–µ–π –Ω–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥.
- –ö—É—Ö–Ω—è: ${settings.cuisine}.
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${settings.difficulty}.
- –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å: –ó–∞–≤—Ç—Ä–∞–∫, –ü–µ—Ä–µ–∫—É—Å 1, –û–±–µ–¥, –ü–µ—Ä–µ–∫—É—Å 2. –£–∂–∏–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
- –í –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–Ω–∏ –Ω–∞ –û–±–µ–¥ –∏–ª–∏ –ü–µ—Ä–µ–∫—É—Å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "–û—Å—Ç–∞—Ç–∫–∏" –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–ª—é–¥ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–µ.`;

    try {
        const result = await apiCall('generateMenuPlan', prompt, menuPlanSchema);
        console.log('‚úÖ RESPONSE [generateMenuPlan] RECEIVED');
        return JSON.parse(result);
    } catch (error) {
        console.error('üî¥ ERROR [generateMenuPlan]:', error);
        throw error; // Propagate the error
    }
}

export async function generateSingleRecipe(recipeName, settings, existingRecipeIds) {
    const familyInfo = settings.family.map(p => `${p.name}, ${p.gender}, ${p.age} –ª–µ—Ç`).join('; ');
    const prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –±–ª—é–¥–∞: "${recipeName}".
- –†–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 'id' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'borsch-s-govyadinoy'), –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ: ${existingRecipeIds.join(', ')}.
- –†–∞—Å—Å—á–∏—Ç–∞–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ —Å–µ–º—å—é: ${familyInfo}.
- –£—á–∏—Ç—ã–≤–∞–π –æ–±—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${settings.preferences}.
- –ë–ª—é–¥–æ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${settings.difficulty}.
- –ö–∞–∂–¥—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö ('estimated_price').
- –ö–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'image_prompt' - –∫—Ä–∞—Ç–∫–æ–µ, —è—Ä–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'a pot of boiling borscht with beef and vegetables').
- –ï—Å–ª–∏ –¥–ª—è —à–∞–≥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–∞–π–º–µ—Ä, —É–∫–∞–∂–∏ 'timer_minutes'.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–µ.`;
    
    try {
        const result = await apiCall(`generateSingleRecipe: ${recipeName}`, prompt, recipeSchema);
        console.log(`‚úÖ RESPONSE [generateSingleRecipe: ${recipeName}] RECEIVED`);
        return JSON.parse(result);
    } catch (error) {
        console.error(`üî¥ ERROR [generateSingleRecipe: ${recipeName}]:`, error);
        throw error; // Propagate the error
    }
}