// Debounce function to limit how often saveState is called
const debounce = (func, wait) => {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
};


// --- Refactored Save Logic for Immediate Persistence ---
let _saveState; // To hold the raw saveState function from firebase.js
const getSaveState = async () => {
    if (!_saveState) {
        const { saveState } = await import('./firebase.js');
        _saveState = saveState;
    }
    return _saveState;
}

let debouncedSave;
const getDebouncedSave = async () => {
    if (!debouncedSave) {
        const save = await getSaveState();
        debouncedSave = debounce(save, 1000);
    }
    return debouncedSave;
};


const version = '1.8.0-secure-api';
const changelog = {
    '1.8.0-secure-api': [
        'üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º Gemini API.',
        '–û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤—Å—è –ª–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ò–ò –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π, –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏.',
        'üîê –£–ª—É—á—à–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç API –∫–ª—é—á. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞.',
        '–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–æ—â–µ–Ω, —É–±—Ä–∞–Ω —à–∞–≥ —Å –≤–≤–æ–¥–æ–º –∫–ª—é—á–∞.',
    ],
    '1.7.0-resilience': [
        'üöÄ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.',
        '–í—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.',
        '‚úÖ –¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —ç—Ç–∞–ø–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ –≤—ã –≤–µ—Ä–Ω–µ—Ç–µ—Å—å –Ω–∞ —Ç–æ—Ç –∂–µ —ç–∫—Ä–∞–Ω.',
        '–ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å—Ç–æ–π—á–∏–≤ –∫ —Ä–∞–∑—Ä—ã–≤–∞–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏–º —Å–±–æ—è–º.',
    ],
    '1.6.0-refactor': [
        'üöÄ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω–æ —Å –Ω—É–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.',
        '–ö–æ–¥ —Ä–∞–∑–±–∏—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ (UI, API, Firebase, State), —á—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –∏ —É–ø—Ä–æ—â–∞–µ—Ç –¥–∞–ª—å–Ω–µ–π—à—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É.',
        '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –º–µ—à–∞–≤—à–∞—è –≤–≤–æ–¥—É API-–∫–ª—é—á–∞.',
    ]
};

const firebaseConfig = {
  apiKey: "AIzaSyAhBuja9z5124TrA65M9agA8IEHobby0h4",
  authDomain: "family-menu-563ef.firebaseapp.com",
  projectId: "family-menu-563ef",
  storageBucket: "family-menu-563ef.firebasestorage.app",
  messagingSenderId: "1096564405600",
  appId: "1:1096564405600:web:1fdb4e5e094396152ada05",
  measurementId: "G-BVDV6ZWRHM"
};


const defaultState = {
    settings: {
        family: [],
        preferences: "–ë–µ–∑ —Ä—ã–±—ã, –±–µ–∑ –≥—Ä–∏–±–æ–≤",
        menuDuration: 7,
        totalBudget: 10000,
        cuisine: "–õ—é–±–∞—è",
        difficulty: "–õ—é–±–∞—è",
    },
    menu: [],
    recipes: {},
    shoppingList: [],
    menuHistory: [], // For storing past menus
    recipeCache: {},
    cookedMeals: {},
    timestamp: null,
    currentDayIndex: 0,
    previewData: null, // For storing menu/recipes during generation/preview
};

let state = JSON.parse(JSON.stringify(defaultState));

export function getState() {
    return state;
}

export function setState(newState) {
    if (newState) {
        // Create a clean state object without old properties like apiKey
        const cleanState = { ...defaultState };
        if (newState.settings) cleanState.settings = { ...defaultState.settings, ...newState.settings };
        delete cleanState.settings.apiKey; // Explicitly remove apiKey if it exists

        state = { ...cleanState, ...newState };
        
        // Ensure recipeCache and previewData exist for users with older state structures
        if (!state.recipeCache) {
            state.recipeCache = {};
        }
        if (!state.previewData) {
            state.previewData = null;
        }
    } else {
        state = JSON.parse(JSON.stringify(defaultState));
    }
}

export async function updateState(updates, immediate = false) {
    state = { ...state, ...updates };

    if (immediate) {
        // Call saveState directly, bypassing the debounce for critical updates
        // like saving a recipe during generation.
        const save = await getSaveState();
        if (save) await save();
    } else {
        // Use the debounced save for regular UI updates to avoid excessive writes.
        const save = await getDebouncedSave();
        if (save) save();
    }
}


export function getVersion() {
    return version;
}

export function getChangelog() {
    return changelog;
}

export function getFirebaseConfig() {
    return firebaseConfig;
}

export function getDefaultState() {
    return JSON.parse(JSON.stringify(defaultState));
}